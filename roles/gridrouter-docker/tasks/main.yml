---
- name: Install required system packages
  become: yes
  become_user: root
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
    state: latest
    update_cache: true

- name: Add Docker GPG apt Key
  become: yes
  become_user: root
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  become: yes
  become_user: root
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu focal stable
    state: present

- name: Update apt and install docker-ce
  become: yes
  become_user: root
  apt:
    name: docker-ce
    state: latest
    update_cache: true
        
- name: Grid Router | Install certain python modules for docker
  pip:
    name: "{{ item.name }}"
  with_items:
  - { name: docker-py }
  - { name: passlib }

- name: Grid Router | Download sctl
  get_url:
    url: "https://github.com/seleniumkit/sctl/releases/download/{{ grid_router_sctl_version }}/sctl_linux_amd64"
    dest: /usr/local/bin/sctl
    mode: 0755
  changed_when: False
  become: yes

- name: Grid Router | Create config dir
  file:
    path: "{{ grid_router_qouta_path }}"
    state: directory
    mode: 0755

- name: Grid Router | Copy quota json template
  template:
    src: quota_template.json.j2
    dest: "{{ grid_router_qouta_path }}/quota_template.json"
    mode: 0644

- name: Grid Router | Generate quota file
  shell: sctl generate --inputFile "{{ grid_router_qouta_path }}/quota_template.json" --outputDirectory "{{ grid_router_qouta_path }}"

- name: Grid Router | Setup quota password
  htpasswd:
    path: "{{ grid_router_path }}/users.htpasswd"
    name: "{{ grid_router_qouta_user }}"
    password: "{{ grid_router_qouta_password}}"
    mode: 0640

- name: Grid Router | Run Grid Router container
  become: yes
  become_user: root
  docker_container:
    name: ggr
    restart_policy: always
    image: "aerokube/ggr:{{ grid_router_version }}"
    #network_mode: host
    state: started
    volumes:
    - "{{ grid_router_path }}:/etc/grid-router:ro"
    env:
      TZ: "{{ grid_router_time_zone }}"
      DOCKER_API_VERSION: "{{ grid_router_docker_api_version }}"
    ports:
    - "{{ grid_router_port }}:{{ grid_router_port }}"

- name: Set up GGR UI
  become: yes
  become_user: root
  docker_container:
    name: ggr-ui
    restart_policy: always
    image: "aerokube/ggr-ui:{{ grid_router_ui_version }}"
    volumes:
      - "{{ grid_router_path }}:/etc/grid-router:ro"
    ports:
    - "8888:8888"

- name: Set up GGR Selenoid UI 
  become: yes
  become_user: root
  docker_container:
    name: selenoid-ui
    restart_policy: always
    image: "aerokube/selenoid-ui:{{ selenoid_ui_version }}"
    links:
    - ggr-ui
    ports:
    - "{{ selenoid_ui_port }}:{{ selenoid_ui_port }}"
    command: >
      -selenoid-uri=http://ggr-ui:8888    

- name: Reload GGR
  become: yes
  become_user: root
  shell: "docker kill -s HUP ggr"

